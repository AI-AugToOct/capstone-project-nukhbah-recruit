{
  "software_engineer": {
    "job_description": "Write a function to train a simple linear regression model using scikit-learn.",
    "question": "Welcome to the coding quiz for the Software Engineer position! We're excited to see your skills in action, especially as they pertain to building and maintaining effective software solutions. In this quiz, you'll face a practical scenario that reflects real-world challenges you might encounter in the role.\n\nImagine you are working on a project that involves predicting housing prices based on various features such as the number of bedrooms, square footage, and the age of the house. Your task is to implement a function that trains a simple linear regression model using the scikit-learn library in Python. This model will help your team make data-driven decisions about housing prices.\n\nTo get started, you’ve been provided with an incomplete function. Your goal is to complete the function, ensuring it correctly trains the linear regression model and returns the trained model. Here’s the code block you need to work with:\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndef train_linear_regression_model(data: pd.DataFrame, target_column: str):\n    # Split the data into features and target variable\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n    \n    # Split the dataset into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    \n    # Initialize the Linear Regression model\n    model = LinearRegression()\n    \n    # Fit the model on the training data\n    # Your code here to fit the model\n    \n    # Return the trained model\n    return model\n```\n\nAssume that the `data` parameter will always be a DataFrame containing numerical features, and the `target_column` will always be a valid column name within that DataFrame. Your task is to fill in the missing part of the code to fit the model using the training data. \n\nOnce you've completed this, you might also consider how you would evaluate the performance of the model briefly, although that's not part of the immediate task.\n\nWe’re looking forward to seeing your solution! Best of luck, and remember to keep your code clean and well-structured!",
    "candidates": {
      "candidate_001": {
        "name": "Candidate 001",
        "file": "candidate_001.txt",
        "answer": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\n\ndef train_linear_regression_model(features, target):\n    # Validate inputs\n    if len(features) != len(target):\n        raise ValueError(\"Features and target must have the same length\")\n    \n    # Split data\n    X_train, X_test, y_train, y_test = train_test_split(\n        features, target, test_size=0.2, random_state=42\n    )\n    \n    # Train model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    \n    # Return score\n    return model.score(X_test, y_test)",
        "evaluated": true
      }
    }
  }
}